name: Main Branch CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # -------------------------
  # Frontend build/test with coverage + SonarCloud
  # -------------------------
  frontend-build:
    runs-on: ubuntu-latest
    outputs:
      build-dir: frontend/build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Run ESLint
        run: npm run lint
        working-directory: frontend

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        working-directory: frontend

      - name: Build app
        id: build
        run: |
          npm run build
          echo "build-dir=frontend/build" >> $GITHUB_OUTPUT
        working-directory: frontend

      - name: SonarCloud Scan (Frontend)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY_FRONTEND }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: |
          npx sonarqube-scanner \
            -Dsonar.projectKey=$SONAR_PROJECTKEY \
            -Dsonar.organization=$SONAR_ORG \
            -Dsonar.sources=frontend/src \
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=main \
            -Dsonar.scm.provider=git

      - name: Export SonarCloud Frontend Issues
        run: |
          curl -s -u $SONAR_TOKEN_FRONTEND: \
            "https://sonarcloud.io/api/issues/search?componentKeys=nus-iss-team-2_sellr-frontend&branch=main" \
            -o sonar-frontend-report.json

      - name: Upload Frontend Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-frontend-report
          path: sonar-frontend-report.json


  # -------------------------
  # Backend build/test with JaCoCo coverage + SonarCloud
  # -------------------------
  backend-build:
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Checkstyle
        run: mvn -f backend/pom.xml checkstyle:check

      - name: Build & Test with coverage
        run: mvn -B -f backend/pom.xml verify

      - name: SonarCloud Scan (Backend)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}
        run: | 
          mvn -B -f backend/pom.xml sonar:sonar \
          -Dsonar.projectKey=$SONAR_PROJECTKEY \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dspring.profiles.active=prod

      - name: Export SonarCloud Backend Issues
        run: |
          curl -s "https://sonarcloud.io/api/issues/search?componentKeys=NUS-ISS-Team-2_sellr&branch=main" \
            -o sonar-backend-report.json


      - name: Upload Backend Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-backend-report
          path: sonar-backend-report.json


  # -------------------------
  # Deployment (only on push to main)
  # -------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            echo "Deploying Sellr project..."
            cd /root/sellr
            git fetch origin
            git checkout main
            git reset --hard origin/main
            docker compose down
            docker compose up -d --build
            echo "Deployment completed"

  # -------------------------
  # DAST Scan (OWASP ZAP)
  # -------------------------
  dast-scan:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Fix ZAP volume permissions
        run: sudo chmod -R 777 $GITHUB_WORKSPACE

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://sellr.site'
          cmd_options: '-J zap_report.json -r zap_report.html'

      - name: Upload ZAP HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-html
          path: zap_report.html

      - name: Upload ZAP JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-json
          path: zap_report.json

  # -------------------------
  # AI Security Analysis
  # -------------------------
  ai-analysis:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, dast-scan]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # -------------------------
      # Download security reports
      # -------------------------
      - name: Download Frontend Report
        uses: actions/download-artifact@v4
        with:
          name: sonar-frontend-report
          path: reports/frontend

      - name: Download Backend Report
        uses: actions/download-artifact@v4
        with:
          name: sonar-backend-report
          path: reports/backend

      - name: Download DAST Report
        uses: actions/download-artifact@v4
        with:
          name: zap-report-json
          path: reports/dast

      # -------------------------
      # Merge JSON reports
      # -------------------------
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Merge Reports
        run: |
          mkdir -p merged_reports
          jq -s '{frontend: .[0], backend: .[1], dast: .[2]}' \
            reports/frontend/sonar-frontend-report.json \
            reports/backend/sonar-backend-report.json \
            reports/dast/zap_report.json \
            > merged_reports/security-report.json

      # -------------------------
      # Install Python & OpenAI SDK
      # -------------------------
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: pip install openai

      # -------------------------
      # AI Remediation Suggestions
      # -------------------------
      - name: AI Remediation Suggestions
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python <<EOF
          import os
          import json
          import math
          import openai

          openai.api_key = os.environ["OPENAI_API_KEY"]

          # Load merged security report
          with open("merged_reports/security-report.json") as f:
              report = json.load(f)

          # Function to condense issues (keep only key fields)
          def condense_issues(component_report):
              if not component_report:
                  return []
              condensed = []
              for issue in component_report.get("issues", []):
                  if not isinstance(issue, dict):
                      continue
                  condensed.append({
                      "id": issue.get("id"),
                      "title": issue.get("title") or issue.get("message"),
                      "severity": issue.get("severity"),
                      "component": issue.get("component"),
                      "recommendation": issue.get("recommendation")  # optional prefilled
                  })
              return condensed

          # Aggregate all issues safely from components
          all_issues = []
          for comp in ["frontend", "backend", "dast"]:
              all_issues += condense_issues(report.get(comp, {}))

          # Chunk issues to avoid token limits
          chunk_size = 200
          num_chunks = math.ceil(len(all_issues)/chunk_size)
          md_lines = ["| Component | Title | Severity | Recommendation |", "|---|---|---|---|"]

          for i in range(num_chunks):
              chunk = all_issues[i*chunk_size:(i+1)*chunk_size]
              prompt = f"""
              Analyze these security issues:
              {json.dumps(chunk, indent=2)}

              For each issue, provide a concise recommendation in Markdown table format as below:
              Component | Title | Severity | Recommendation
              Ensure proper escaping of pipes (|) in titles and recommendations.
              I have already prepared the headers md_lines = ["| Component | Title | Severity | Recommendation |", "|---|---|---|---|"], append only the rows for each issue.
              """

              response = openai.chat.completions.create(
                  model="gpt-3.5-turbo",
                  messages=[
                      {"role": "system", "content": "You are a cybersecurity expert."},
                      {"role": "user", "content": prompt}
                  ],
                  temperature=0
              )

              # Append AI-generated Markdown directly
              md_lines.append(response.choices[0].message.content.strip())

          # Save Markdown
          md_path = "merged_reports/ai-recommendations.md"
          os.makedirs("merged_reports", exist_ok=True)
          with open(md_path, "w") as f:
              f.write("\n".join(md_lines))

          print("✅ AI recommendations Markdown generated successfully!")
          EOF

      - name: Upload AI Recommendations
        uses: actions/upload-artifact@v4
        with:
          name: ai-recommendations
          path: |
            merged_reports/ai-recommendations.md

